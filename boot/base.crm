;($define! $sequence
;  ((wrap
;     ($vau ($seq2) #ignore
;          ($seq2
;            ($define! $aux
;              ($vau (head . tail) env
;                   ($if (null? tail)
;                     (eval head env)
;                     ($seq2
;                       (eval head env)
;                       (eval (cons $aux tail) env)))))
;            ($vau body env
;                 ($if (null? body)
;                   #inert
;                   (eval (cons $aux body) env))))))
;   ($vau (first second) env
;        ((wrap ($vau #ignore #ignore (eval second env)))
;         (eval first env)))))

($define! list (wrap ($vau x #ignore x)))

($define! list*
  (wrap ($vau args #ignore
          ($sequence
            ($define! aux
              (wrap ($vau ((head . tail)) #ignore
                      ($if (null? tail)
                            head
                            (cons head (aux tail))))))
            (aux args)))))


;($define! $vau
;  ((wrap ($vau ($vau) #ignore
;            ($vau (formals eformal . body) env
;              (eval (list $vau formals eformal
;                        (cons $sequence body))
;                    env))))
;    $vau))

;($define! $lambda
;  ($vau (formals . body) env
;    (wrap (eval (list* $vau formals #ignore body)
;                env))))

($define! quote ($vau (x) #ignore x))

($define! car ($lambda ((x . #ignore)) x))
($define! cdr ($lambda ((#ignore . x)) x))

($define! caar ($lambda (((x . #ignore) . #ignore)) x))
($define! cdar ($lambda (((#ignore . x) . #ignore)) x))
($define! cadr ($lambda ((#ignore . (x . #ignore))) x))
($define! cddr ($lambda ((#ignore . (#ignore . x))) x))

($define! caaar ($lambda ((((x . #ignore) . #ignore) . #ignore)) x))
($define! cdaar ($lambda ((((#ignore . x) . #ignore) . #ignore)) x))
($define! cadar ($lambda (((#ignore . (x . #ignore)) . #ignore)) x))
($define! cddar ($lambda (((#ignore . (#ignore . x)) . #ignore)) x))
($define! caadr ($lambda ((#ignore . ((x . #ignore) . #ignore))) x))
($define! cdadr ($lambda ((#ignore . ((#ignore . x) . #ignore))) x))
($define! caddr ($lambda ((#ignore . (#ignore . (x . #ignore)))) x))
($define! cdddr ($lambda ((#ignore . (#ignore . (#ignore . x)))) x))

($define! caaaar ($lambda (((((x . #ignore) . #ignore) . #ignore) . #ignore)) x))
($define! cdaaar ($lambda (((((#ignore . x) . #ignore) . #ignore) . #ignore)) x))
($define! cadaar ($lambda ((((#ignore . (x . #ignore)) . #ignore) . #ignore)) x))
($define! cddaar ($lambda ((((#ignore . (#ignore . x)) . #ignore) . #ignore)) x))
($define! caadar ($lambda (((#ignore . ((x . #ignore) . #ignore)) . #ignore)) x))
($define! cdadar ($lambda (((#ignore . ((#ignore . x) . #ignore)) . #ignore)) x))
($define! caddar ($lambda (((#ignore . (#ignore . (x . #ignore))) . #ignore)) x))
($define! cdddar ($lambda (((#ignore . (#ignore . (#ignore . x))) . #ignore)) x))
($define! caaadr ($lambda ((#ignore . (((x . #ignore) . #ignore) . #ignore))) x))
($define! cdaadr ($lambda ((#ignore . (((#ignore . x) . #ignore) . #ignore))) x))
($define! cadadr ($lambda ((#ignore . ((#ignore . (x . #ignore)) . #ignore))) x))
($define! cddadr ($lambda ((#ignore . ((#ignore . (#ignore . x)) . #ignore))) x))
($define! caaddr ($lambda ((#ignore . (#ignore . ((x . #ignore) . #ignore)))) x))
($define! cdaddr ($lambda ((#ignore . (#ignore . ((#ignore . x) . #ignore)))) x))
($define! cadddr ($lambda ((#ignore . (#ignore . (#ignore . (x . #ignore))))) x))
($define! cddddr ($lambda ((#ignore . (#ignore . (#ignore . (#ignore . x))))) x))

($define! encycle!
  ($lambda (ls k1 k2)
    ($if (>? k2 0)
         (set-cdr! (list-tail ls (+ k1 k2 -1))
                   (list-tail ls k1))
         #inert)))

($define! map
  (wrap ($vau (appv . lss) env
    ($define! acc
      ($lambda (input (k1 k2) base-result head tail sum)
        ($define! aux
          ($lambda (input count)
            ($if (=? count 0)
                 base-result
                 (sum (head input)
                      (aux (tail input) (- count 1))))))
        (aux input (+ k1 k2))))
    ($define! enlist
      ($lambda (input ms head tail)
        ($define! result (acc input ms () head tail cons))
        (apply encycle! (list* result ms))
        result))
    ($define! mss (cddr (get-list-metrics lss)))
    ($define! cars ($lambda (lss) (enlist lss mss caar cdr)))
    ($define! cdrs ($lambda (lss) (enlist lss mss cdar cdr)))
    ($define! result-metrics
      (acc lss mss (cddr (get-list-metrics (car lss)))
           ($lambda (lss) (cddr (get-list-metrics (car lss))))
           cdr
           ($lambda ((j1 j2) (k1 k2))
             (list (max j1 k1)
                   ($cond ((=? j2 0) k2)
                   ((=? k2 0) j2)
                   (#t (lcm j2 k2)))))))
    (enlist lss
            result-metrics
            ($lambda (lss) (apply appv (cars lss) env))
            cdrs))))

($define! apply
  ($lambda (appv arg . opt)
    (eval (cons (unwrap appv) arg)
          ($if (null? opt)
               (make-environment)
               (car opt)))))

($define! $cond
  ($vau clauses env
    ($define! aux
      ($lambda ((test . body) . clauses)
        ($if (eval test env)
             (apply (wrap $sequence) body env)
             (apply (wrap $cond) clauses env))))
    ($if (null? clauses)
        #inert
        (apply aux clauses))))

($define! newline ($lambda #ignore (display #\newline)))

($define! get-list-metrics
  ($lambda (ls)
    ($define! aux
      ($lambda (kth k nth n)
        ($if (>=? k n)
             ($if (pair? (cdr nth))
                  (aux ls 0 (cdr nth) (+ n 1))
                  (list (+ n 1)
                        ($if (null? (cdr nth)) 1 0)
                        (+ n 1)
                        0))
             ($if (eq? kth nth)
                  (list n 0 k (- n k))
                  (aux (cdr kth) (+ k 1) nth n)))))
    ($if (pair? ls)
         (aux ls 0 ls 0)
         (list 0 ($if (null? ls) 1 0) 0 0))))

($define! list-tail
  ($lambda (ls k)
    ($if (>? k 0)
         (list-tail (cdr ls) (- k 1))
         ls)))

($define! max
  ($lambda (a b)
    ($if (>? a b)
         a
         b)))

;($define! map
;  ($lambda (f ls)
;    ($if (null? ls)
;         ls
;         (cons (f (car ls))
;               (map f (cdr ls))))))

($define! $let
  ($vau (bindings . body) env
    (eval (cons (list* $lambda (map car bindings) body)
                (map cadr bindings))
          env)))

($define! not? ($lambda (x) ($if x #f #t)))

($define! and?
  ($lambda x
    ($define! aux
      ($lambda (x k)
        ($cond ((<=? k 0) #t)
               ((car x) (aux (cdr x) (- k 1)))
               (#t #f))))
    (aux x (car (get-list-metrics x)))))

($define! or?
  ($lambda x
    (not? (apply and? (map not? x)))))

($define! $and?
  ($vau x e
    ($cond ((null? x) #t)
           ((null? (cdr x)) (eval (car x) e))
           ((eval (car x) e) (apply (wrap $and?) (cdr x) e))
           (#t #f))))

($define! $or?
  ($vau x e
    ($cond ((null? x) #f)
           ((null? (cdr x)) (eval (car x) e))
           ((eval (car x) e) #t)
           (#t (apply (wrap $or?) (cdr x) e)))))

($define! combiner?
  ($lambda x
    (apply and? (map ($lambda (x)
                        (or? (applicative? x)
                             (operative? x)))
                     x))))

($define! list-ref
  ($lambda (ls k)
    (car (list-tail ls k))))

($define! first   ($lambda (ls) (list-ref ls 0)))
($define! second  ($lambda (ls) (list-ref ls 1)))
($define! third   ($lambda (ls) (list-ref ls 2)))
($define! fourth  ($lambda (ls) (list-ref ls 3)))
($define! fifth   ($lambda (ls) (list-ref ls 4)))
($define! sixth   ($lambda (ls) (list-ref ls 5)))
($define! seventh ($lambda (ls) (list-ref ls 6)))
($define! eighth  ($lambda (ls) (list-ref ls 7)))
($define! ninth   ($lambda (ls) (list-ref ls 8)))
($define! tenth   ($lambda (ls) (list-ref ls 9)))

($define! foldl
  ($lambda (f z xs)
    ($if (null? xs)
         z
         (foldl f (f z (car xs)) (cdr xs)))))

($define! foldr
  ($lambda (f z xs)
    ($if (null? xs)
         z
         (f (car xs) (foldr f z (cdr xs))))))

($define! length
  ($lambda (xs)
    (foldl ($lambda (len x) (+ len 1)) 0 xs)))

($define! flip
  ($lambda (f)
    ($lambda (x y)
      (f y x))))

($define! reverse
  ($lambda (xs)
    (foldl (flip cons) () xs)))

($define! filter
  ($lambda (p? xs)
    (foldr ($lambda (x xs)
             ($if (p? x)
                  (cons x xs)
                  xs))
           ()
           xs)))

; binary list append
($define! ++
  ($lambda (xs ys)
    (foldr cons ys xs)))

; n-ary list append
($define! append
  ($lambda ls
    ($define! app-aux
      ($lambda (lists acc)
        ($if (null? lists)
             acc
             (app-aux (cdr lists) (++ acc (car lists))))))
    (app-aux ls ())))

($define! snoc (flip cons))

; define new plus in terms of a fold of old plus
($define! +
  (($lambda (old+)
    ($lambda xs
      (foldl old+ 0 xs)))
   +))

($define! *
  (($lambda (old*)
    ($lambda xs
      (foldl old* 1 xs)))
   *))

($define! -
  (($lambda (old-)
    ($lambda xs
      ($cond ((null? xs) (error "-: requires at least 1 argument"))
             ((null? (cdr xs)) (old- 0 (car xs)))
             (#t (old- (car xs) (apply + (cdr xs)))))))
   -))

($define! /
  (($lambda (old/)
    ($lambda xs
      ($cond ((null? xs) (error "/: requires at least 1 argument"))
             ((null? (cdr xs)) (old/ 1 (car xs)))
             (#t (old/ (car xs) (apply * (cdr xs)))))))
   /))

($define! $let*
  ($vau (bindings . body) env
    (eval ($if (null? bindings)
               (list* $let bindings body)
               (list $let
                     (list (car bindings))
                     (list* $let* (cdr bindings) body)))
          env)))

($define! $letrec
  ($vau (bindings . body) env
    (eval (list* $let ()
                 (list $define!
                       (map car bindings)
                       (list* list (map cadr bindings)))
                       body)
          env)))

($define! $letrec*
  ($vau (bindings . body) env
    (eval ($if (null? bindings)
               (list* $letrec bindings body)
               (list $letrec
                     (list (car bindings))
                     (list* $letrec* (cdr bindings) body)))
          env)))
